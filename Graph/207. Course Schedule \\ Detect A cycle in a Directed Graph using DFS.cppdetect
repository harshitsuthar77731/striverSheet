class Solution {
public:
    unordered_map<int,int>visited;
    int path[2001];  
    bool dfs(unordered_map<int,vector<int>>&mpv,int node){
        visited[node]++;
        path[node] = 0;
        
        for(auto x:mpv[node]){
            if(path[x]==0&&visited[node]>0) // 
                return true;
            if(visited[x] == 0){         // means not in queue
                bool cyclemila = dfs(mpv,x);
                if(cyclemila==true)
                    return true;
            }
        }
        path[node]=-1;
        return false;
    }
    bool canFinish(int numCourses, vector<vector<int>>& pre) {
        unordered_map<int,vector<int>>mpv;
        memset(path,-1,sizeof(path));
        
        for(auto x:pre){
                mpv[x[1]].push_back(x[0]);
        }
        for(int i=0;i<numCourses;i++){
            if(visited[i]==0){
                if(dfs(mpv,i)==true)
                    return false;
            }
        }
        return true;
    }
};
